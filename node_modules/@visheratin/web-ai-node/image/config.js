"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
/**
 * Configuration for the image model.
 *
 * @param classes - map where keys are class IDs and values are class names.
 * @param colors - map where keys are class IDs and values are class colors.
 *
 * @remarks
 * If the colors are not present in the config file, they will be randomly
 * populated during the configuration creation.
 */
class Config {
    constructor() {
        /**
         * Checks the configuration for correctness. Throws an error if the configuration is not valid.
         */
        this.validate = () => {
            if (this.colors && this.classes && this.classes.size != this.colors.size) {
                throw new Error("lengths of classes and colors do not match");
            }
            this.classes.forEach((value, key, _) => {
                if (this.colors && !this.colors.has(key)) {
                    throw new Error(`class ${value} (code ${key}) is not present in colors`);
                }
            });
        };
        this.classes = new Map();
        this.colors = new Map();
    }
}
exports.Config = Config;
_a = Config;
/**
 * Reads the configuration from the file.
 *
 * @param configPath - URL to the configuration file.
 *
 * @returns configuration for the image model.
 */
Config.fromFile = async (configPath) => {
    const configData = await fetch(configPath).then((resp) => resp.json());
    const config = _a.parseConfig(configData);
    config.validate();
    return config;
};
/**
 * Parses the configuration from the JSON data.
 *
 * @param configData - JSON data read from the configuration file.
 *
 * @returns configuration for the image model.
 */
Config.parseConfig = (configData) => {
    const res = new Config();
    for (const [idxString, className] of Object.entries(configData["id2label"])) {
        const idx = Number(idxString);
        res.classes.set(idx, className);
        if ("colors" in configData && idxString in configData["colors"]) {
            const color = configData["colors"][idxString];
            res.colors.set(idx, color);
        }
        else {
            const r = Math.round(Math.random() * 256);
            const g = Math.round(Math.random() * 256);
            const b = Math.round(Math.random() * 256);
            res.colors.set(idx, [r, g, b]);
        }
    }
    return res;
};
exports.default = Config;
//# sourceMappingURL=config.js.map
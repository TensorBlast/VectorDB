"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareImagesTensor = void 0;
const ort = __importStar(require("onnxruntime-common"));
const jimp_1 = __importDefault(require("jimp"));
const prepareImagesTensor = async (inputs, preprocessor) => {
    if (!preprocessor) {
        throw Error("the model is not initialized");
    }
    const tensors = new Array(inputs.length);
    for (let i = 0; i < inputs.length; i++) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const image = await jimp_1.default.read(inputs[i]);
        tensors[i] = preprocessor.process(image).tensor;
    }
    const resultData = new Float32Array(tensors.length * tensors[0].data.length);
    for (let i = 0; i < tensors.length; i++) {
        for (let j = 0; j < tensors[0].data.length; j++) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            resultData[i * tensors[0].data.length + j] = tensors[i].data[j];
        }
    }
    return new ort.Tensor("float32", resultData, [
        tensors.length,
        tensors[0].dims[1],
        tensors[0].dims[2],
        tensors[0].dims[3],
    ]);
};
exports.prepareImagesTensor = prepareImagesTensor;
//# sourceMappingURL=prepare.js.map
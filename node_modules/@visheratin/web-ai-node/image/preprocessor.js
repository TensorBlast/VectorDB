"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Preprocessor = void 0;
const jimp_1 = __importDefault(require("jimp"));
const ort = __importStar(require("onnxruntime-common"));
class Preprocessor {
    constructor(config) {
        this.process = (image) => {
            if (this.config.resize) {
                if (!this.config.squareImage) {
                    if (image.bitmap.width > image.bitmap.height &&
                        this.config.resizeLonger) {
                        image = image.resize(this.config.size, -1, "bicubicInterpolation");
                    }
                    else {
                        image = image.resize(-1, this.config.size, "bicubicInterpolation");
                    }
                }
                else {
                    image = image.resize(this.config.size, this.config.size, "bicubicInterpolation");
                }
            }
            const newWidth = image.bitmap.width;
            const newHeight = image.bitmap.height;
            if (this.config.centerCrop) {
                const startX = (image.bitmap.width - this.config.cropSize) / 2;
                const startY = (image.bitmap.height - this.config.cropSize) / 2;
                image = image.crop(startX, startY, this.config.cropSize, this.config.cropSize);
            }
            const tensor = this.imageDataToTensor(image);
            return {
                tensor: tensor,
                newWidth: newWidth,
                newHeight: newHeight,
            };
        };
        /**
         * imageDataToTensor converts Jimp image to ORT tensor
         * @param image instance of Jimp image
         * @param dims target dimensions of the tensor
         * @returns ORT tensor
         */
        this.imageDataToTensor = (image) => {
            const [redArray, greenArray, blueArray] = [
                new Array(),
                new Array(),
                new Array(),
            ];
            const width = this.config.pad ? this.config.padSize : image.bitmap.width;
            const height = this.config.pad ? this.config.padSize : image.bitmap.height;
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    if (x >= image.bitmap.width || y >= image.bitmap.height) {
                        redArray.push(0.0);
                        greenArray.push(0.0);
                        blueArray.push(0.0);
                        continue;
                    }
                    const color = image.getPixelColor(x, y);
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    const rgba = jimp_1.default.intToRGBA(color);
                    let value = this.getValue(rgba.r, 0);
                    redArray.push(value);
                    value = this.getValue(rgba.g, 1);
                    greenArray.push(value);
                    value = this.getValue(rgba.b, 2);
                    blueArray.push(value);
                }
            }
            let transposedData = [];
            if (this.config.flipChannels) {
                transposedData = blueArray.concat(greenArray).concat(redArray);
            }
            else {
                transposedData = redArray.concat(greenArray).concat(blueArray);
            }
            const float32Data = new Float32Array(transposedData);
            const dims = [1, 3, height, width];
            const inputTensor = new ort.Tensor("float32", float32Data, dims);
            return inputTensor;
        };
        this.getValue = (value, colorIdx) => {
            if (this.config.normalize.enabled &&
                this.config.normalize.mean &&
                this.config.normalize.std) {
                value =
                    (value / 255.0 - this.config.normalize.mean[colorIdx]) /
                        this.config.normalize.std[colorIdx];
            }
            else {
                if (this.config.rescale) {
                    value = value * this.config.rescaleFactor;
                }
                else {
                    value = value / 255.0;
                }
            }
            return value;
        };
        this.config = config;
    }
}
exports.Preprocessor = Preprocessor;
exports.default = Preprocessor;
//# sourceMappingURL=preprocessor.js.map
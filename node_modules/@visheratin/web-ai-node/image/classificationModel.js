"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassificationModel = void 0;
const utils_js_1 = require("./utils.js");
const prepare_js_1 = require("./prepare.js");
const base_js_1 = require("./base.js");
/**
 * Model for classifying images.
 *
 * @implements IImageModel
 *
 * @remarks
 * The model is initialized via `init()` function. The model cannot be used if it is not initialized.
 *
 * @param metadata - information about the model.
 * @param initialized - flag indicating if the model was initialized.
 */
class ClassificationModel extends base_js_1.BaseImageModel {
    constructor() {
        super(...arguments);
        /**
         * Processes the image and generates the classification predictions.
         *
         * @param input - either URL to the image or Buffer with the image.
         * @param num - maximum number of predictions to generate.
         *
         * @returns classification predictions.
         */
        this.process = async (inputs, num = 3) => {
            if (!this.initialized || !this.preprocessor || !this.config) {
                throw Error("the model is not initialized");
            }
            if (typeof inputs === "string") {
                inputs = [inputs];
            }
            if (inputs instanceof ArrayBuffer) {
                inputs = [inputs];
            }
            const tensor = await (0, prepare_js_1.prepareImagesTensor)(inputs, this.preprocessor);
            const start = new Date();
            const output = await this.runInference(tensor, num);
            const end = new Date();
            const elapsed = (end.getTime() - start.getTime()) / 1000;
            const result = {
                results: output,
                elapsed: elapsed,
            };
            if (output.length === 1) {
                result.results = output[0];
            }
            return result;
        };
        this.runInference = async (input, clsNum) => {
            if (!this.initialized || !this.sessions || !this.config) {
                throw Error("the model is not initialized");
            }
            const session = this.sessions.get("model");
            if (!session) {
                throw Error("the model is absent in the sessions map");
            }
            const feeds = {};
            const inputNames = await session.inputNames();
            feeds[inputNames[0]] = input;
            const outputData = await session.run(feeds);
            const outputNames = await session.outputNames();
            const logits = outputData[outputNames[0]];
            const result = [];
            for (let i = 0; i < logits.dims[0]; i++) {
                const res = new Array(clsNum).fill({
                    class: "unknown",
                    confidence: 0,
                });
                const sm = (0, utils_js_1.softmax)(
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                logits.data.slice(i * logits.dims[1], (i + 1) * logits.dims[1]));
                for (let k = 0; k < sm.length; k++) {
                    for (let j = 0; j < res.length; j++) {
                        if (res[j].confidence < sm[k]) {
                            const cls = this.config.classes.get(k);
                            if (!cls) {
                                continue;
                            }
                            res[j] = {
                                class: cls,
                                confidence: sm[k],
                            };
                            break;
                        }
                    }
                }
                res.sort((a, b) => b.confidence - a.confidence);
                result.push(res);
            }
            return result;
        };
    }
}
exports.ClassificationModel = ClassificationModel;
//# sourceMappingURL=classificationModel.js.map
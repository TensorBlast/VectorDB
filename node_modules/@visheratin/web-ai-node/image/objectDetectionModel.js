"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectDetectionModel = void 0;
const jimp_1 = __importDefault(require("jimp"));
const utils_js_1 = require("./utils.js");
const base_js_1 = require("./base.js");
class ObjectDetectionModel extends base_js_1.BaseImageModel {
    constructor() {
        super(...arguments);
        this.process = async (input) => {
            if (!this.initialized ||
                !this.sessions ||
                !this.preprocessor ||
                !this.config) {
                throw Error("the model is not initialized");
            }
            // @ts-ignore
            const image = await jimp_1.default.read(input);
            const tensor = this.preprocessor.process(image).tensor;
            const start = new Date();
            const session = this.sessions.get("model");
            if (!session) {
                throw Error("the model is absent in the sessions map");
            }
            const feeds = {};
            const inputNames = await session.inputNames();
            feeds[inputNames[0]] = tensor;
            const output = await session.run(feeds);
            if (!output) {
                throw Error("model output is undefined");
            }
            const end = new Date();
            const elapsed = (end.getTime() - start.getTime()) / 1000;
            const classIndices = [];
            const classConfidences = [];
            const indices = [];
            for (let i = 0; i < output["logits"].dims[1]; i++) {
                const s = output["logits"].dims[2] * i;
                const f = output["logits"].dims[2] * (i + 1);
                const data = output["logits"].data.slice(s, f);
                // @ts-ignore
                const classes = (0, utils_js_1.softmax)(data);
                let max = 0;
                let maxIdx = 0;
                for (let j = 0; j < classes.length - 1; j++) {
                    if (classes[j] > max) {
                        max = classes[j];
                        maxIdx = j;
                    }
                }
                const threshold = 0.9;
                if (max > threshold) {
                    classIndices.push(maxIdx);
                    classConfidences.push(max);
                    indices.push(i);
                }
            }
            const boxes = [];
            for (let i = 0; i < indices.length; i++) {
                const index = indices[i];
                const box = output["boxes"].data.slice(4 * index, 4 * (index + 1));
                // @ts-ignore
                box[0] = box[0] - box[2] / 2;
                // @ts-ignore
                box[1] = box[1] - box[3] / 2;
                // @ts-ignore
                boxes.push(box);
            }
            const res = {
                objects: [],
                elapsed: elapsed,
            };
            for (let i = 0; i < indices.length; i++) {
                const cls = this.config.classes.get(classIndices[i]);
                if (!cls) {
                    continue;
                }
                const color = this.config.colors.get(classIndices[i]);
                if (!color) {
                    continue;
                }
                const hex = "#" +
                    componentToHex(color[0]) +
                    componentToHex(color[1]) +
                    componentToHex(color[2]);
                const box = boxes[i];
                res.objects.push({
                    class: cls,
                    color: hex,
                    confidence: classConfidences[i],
                    x: box[0],
                    y: box[1],
                    width: box[2],
                    height: box[3],
                });
            }
            return res;
        };
    }
}
exports.ObjectDetectionModel = ObjectDetectionModel;
function componentToHex(c) {
    const hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
}
//# sourceMappingURL=objectDetectionModel.js.map
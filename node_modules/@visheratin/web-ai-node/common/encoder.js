"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encoder = void 0;
const ort = __importStar(require("onnxruntime-common"));
const generator_js_1 = require("./generator.js");
class Encoder {
    constructor(session, outputName, type) {
        this.process = async (inputs, attentionMask, encoderOutput) => {
            if (attentionMask &&
                (inputs.dims[0] !== attentionMask.dims[0] ||
                    inputs.dims[1] !== attentionMask.dims[1])) {
                throw new Error("The dimensions of inputs and attention masks are not equal");
            }
            let encoderFeeds = {};
            switch (this.type) {
                case generator_js_1.GeneratorType.Seq2Seq: {
                    if (!attentionMask) {
                        throw new Error("Attention mask is not provided");
                    }
                    encoderFeeds = {
                        input_ids: inputs,
                        attention_mask: attentionMask,
                    };
                    const inputNames = await this.session.inputNames();
                    if (inputNames.includes("token_type_ids")) {
                        const typeIdsTensor = new ort.Tensor("int64", new BigInt64Array(inputs.data.length).fill(0n), [inputs.dims[0], inputs.dims[1]]);
                        encoderFeeds["token_type_ids"] = typeIdsTensor;
                    }
                    if (encoderOutput) {
                        encoderFeeds["encoder_hidden_states"] = encoderOutput;
                    }
                    break;
                }
                case generator_js_1.GeneratorType.Img2Seq: {
                    encoderFeeds = {
                        pixel_values: inputs,
                    };
                    break;
                }
            }
            const output = await this.session.run(encoderFeeds);
            const result = output[this.outputName];
            return result;
        };
        this.session = session;
        this.outputName = outputName;
        this.type = type;
    }
}
exports.Encoder = Encoder;
//# sourceMappingURL=encoder.js.map
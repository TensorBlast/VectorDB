"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tensor = void 0;
const ort = __importStar(require("onnxruntime-common"));
class Tensor {
    constructor(ortTensor) {
        this.at = (indices) => {
            if (indices.length != this.ortTensor.dims.length) {
                throw new Error(`indices length must match tensor dimensions`);
            }
            for (let i = 0; i < indices.length; i++) {
                if (indices[i] >= this.ortTensor.dims[i]) {
                    throw new Error(`index for dimension ${i} (${indices[i]}) is larger than the dimension size (${this.ortTensor.dims[i]})`);
                }
            }
            let index = 0;
            for (let i = 0; i < indices.length; i++) {
                let skipSize = 1;
                for (let j = i + 1; j < this.ortTensor.dims.length; j++) {
                    skipSize *= this.ortTensor.dims[j];
                }
                const skip = indices[i] * skipSize;
                index += skip;
            }
            return this.ortTensor.data[index];
        };
        this.setAt = (indices, value) => {
            if (indices.length != this.ortTensor.dims.length) {
                throw new Error(`indices length must match tensor dimensions`);
            }
            for (let i = 0; i < indices.length; i++) {
                if (indices[i] >= this.ortTensor.dims[i]) {
                    throw new Error(`index for dimension ${i} (${indices[i]}) is larger than the dimension size (${this.ortTensor.dims[i]})`);
                }
            }
            let index = 0;
            for (let i = 0; i < indices.length; i++) {
                let skipSize = 1;
                for (let j = i + 1; j < this.ortTensor.dims.length; j++) {
                    skipSize *= this.ortTensor.dims[j];
                }
                const skip = indices[i] * skipSize;
                index += skip;
            }
            this.ortTensor.data[index] = value;
        };
        this.argmax = (dim) => {
            if (dim >= this.ortTensor.dims.length) {
                throw new Error("dim must be smaller than the number of dimensions in tensor");
            }
            let outDims = [];
            let size = 1;
            for (let i = 0; i < this.ortTensor.dims.length; i++) {
                if (i != dim) {
                    outDims.push(this.ortTensor.dims[i]);
                    size *= this.ortTensor.dims[i];
                }
            }
            if (outDims.length == 0) {
                outDims = [1];
            }
            const argmax = new Tensor(new ort.Tensor(new Float32Array(size).fill(0), outDims));
            const maxValues = new Tensor(new ort.Tensor(new Float32Array(size).fill(-Infinity), outDims));
            const indices = new Array(this.ortTensor.dims.length).fill(0);
            this.argmaxIter(0, dim, indices, argmax, maxValues, 0);
            return argmax;
        };
        this.argmaxIter = (dim, targetDim, indices, argmax, maxValues, depth) => {
            if (dim == targetDim) {
                this.argmaxIter(dim + 1, targetDim, indices, argmax, maxValues, depth);
            }
            for (let i = 0; i < this.ortTensor.dims[dim]; i++) {
                indices[dim] = i;
                if (depth == this.ortTensor.dims.length - 1) {
                    let outIndices = [];
                    for (let k = 0; k < indices.length; k++) {
                        if (k != targetDim) {
                            outIndices.push(indices[k]);
                        }
                    }
                    if (outIndices.length == 0) {
                        outIndices = [0];
                    }
                    for (let j = 0; j < this.ortTensor.dims[targetDim]; j++) {
                        indices[targetDim] = j;
                        const value = this.at(indices);
                        const maxValue = maxValues.at(outIndices);
                        if (value > maxValue) {
                            argmax.setAt(outIndices, j);
                            maxValues.setAt(outIndices, value);
                        }
                    }
                }
                else {
                    this.argmaxIter(dim + 1, targetDim, indices, argmax, maxValues, depth + 1);
                }
            }
        };
        this.ortTensor = ortTensor;
    }
}
exports.Tensor = Tensor;
//# sourceMappingURL=tensor.js.map
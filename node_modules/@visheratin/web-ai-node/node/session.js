"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const ort = __importStar(require("onnxruntime-node"));
const pako = __importStar(require("pako"));
const node_fetch_1 = __importDefault(require("node-fetch"));
class Session {
    constructor(params) {
        this.init = async (modelPath) => {
            ort.env.wasm.numThreads = this.params.numThreads;
            ort.env.wasm.wasmPaths = this.params.wasmRoot;
            const modelData = await this.fetchData(modelPath);
            const session = await ort.InferenceSession.create(modelData, {
                executionProviders: this.params.executionProviders,
                graphOptimizationLevel: "all",
                executionMode: "parallel",
            });
            this.ortSession = session;
        };
        this.fetchData = async (modelPath) => {
            const extension = modelPath.split(".").pop();
            let modelData = await (0, node_fetch_1.default)(modelPath).then((resp) => resp.arrayBuffer());
            if (extension === "gz") {
                modelData = pako.inflate(modelData);
            }
            return modelData;
        };
        this.run = async (input) => {
            if (!this.ortSession) {
                throw Error("the session is not initialized. Call `init()` method first.");
            }
            return await this.ortSession.run(input);
        };
        this.inputNames = () => {
            if (!this.ortSession) {
                throw Error("the session is not initialized. Call `init()` method first.");
            }
            return this.ortSession.inputNames;
        };
        this.outputNames = () => {
            if (!this.ortSession) {
                throw Error("the session is not initialized. Call `init()` method first.");
            }
            return this.ortSession.outputNames;
        };
        this.params = params;
        const cacheSize = params.cacheSizeMB * 1e6;
        this.cacheSize = cacheSize;
    }
}
exports.Session = Session;
//# sourceMappingURL=session.js.map